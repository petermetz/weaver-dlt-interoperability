// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/state.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Meta {
    // message fields
    pub protocol: Meta_Protocol,
    pub timestamp: ::std::string::String,
    pub proof_type: ::std::string::String,
    pub serialization_format: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Meta {
    fn default() -> &'a Meta {
        <Meta as ::protobuf::Message>::default_instance()
    }
}

impl Meta {
    pub fn new() -> Meta {
        ::std::default::Default::default()
    }

    // .common.state.Meta.Protocol protocol = 1;


    pub fn get_protocol(&self) -> Meta_Protocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = Meta_Protocol::BITCOIN;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: Meta_Protocol) {
        self.protocol = v;
    }

    // string timestamp = 2;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }

    // string proof_type = 3;


    pub fn get_proof_type(&self) -> &str {
        &self.proof_type
    }
    pub fn clear_proof_type(&mut self) {
        self.proof_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_type(&mut self, v: ::std::string::String) {
        self.proof_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_type(&mut self) -> &mut ::std::string::String {
        &mut self.proof_type
    }

    // Take field
    pub fn take_proof_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proof_type, ::std::string::String::new())
    }

    // string serialization_format = 4;


    pub fn get_serialization_format(&self) -> &str {
        &self.serialization_format
    }
    pub fn clear_serialization_format(&mut self) {
        self.serialization_format.clear();
    }

    // Param is passed by value, moved
    pub fn set_serialization_format(&mut self, v: ::std::string::String) {
        self.serialization_format = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialization_format(&mut self) -> &mut ::std::string::String {
        &mut self.serialization_format
    }

    // Take field
    pub fn take_serialization_format(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serialization_format, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Meta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proof_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serialization_format)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.protocol != Meta_Protocol::BITCOIN {
            my_size += ::protobuf::rt::enum_size(1, self.protocol);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.timestamp);
        }
        if !self.proof_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.proof_type);
        }
        if !self.serialization_format.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.serialization_format);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.protocol != Meta_Protocol::BITCOIN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(2, &self.timestamp)?;
        }
        if !self.proof_type.is_empty() {
            os.write_string(3, &self.proof_type)?;
        }
        if !self.serialization_format.is_empty() {
            os.write_string(4, &self.serialization_format)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Meta {
        Meta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Meta_Protocol>>(
                "protocol",
                |m: &Meta| { &m.protocol },
                |m: &mut Meta| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "timestamp",
                |m: &Meta| { &m.timestamp },
                |m: &mut Meta| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "proof_type",
                |m: &Meta| { &m.proof_type },
                |m: &mut Meta| { &mut m.proof_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serialization_format",
                |m: &Meta| { &m.serialization_format },
                |m: &mut Meta| { &mut m.serialization_format },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Meta>(
                "Meta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Meta {
        static instance: ::protobuf::rt::LazyV2<Meta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Meta::new)
    }
}

impl ::protobuf::Clear for Meta {
    fn clear(&mut self) {
        self.protocol = Meta_Protocol::BITCOIN;
        self.timestamp.clear();
        self.proof_type.clear();
        self.serialization_format.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Meta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Meta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Meta_Protocol {
    BITCOIN = 0,
    ETHEREUM = 1,
    FABRIC = 3,
    CORDA = 4,
}

impl ::protobuf::ProtobufEnum for Meta_Protocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Meta_Protocol> {
        match value {
            0 => ::std::option::Option::Some(Meta_Protocol::BITCOIN),
            1 => ::std::option::Option::Some(Meta_Protocol::ETHEREUM),
            3 => ::std::option::Option::Some(Meta_Protocol::FABRIC),
            4 => ::std::option::Option::Some(Meta_Protocol::CORDA),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Meta_Protocol] = &[
            Meta_Protocol::BITCOIN,
            Meta_Protocol::ETHEREUM,
            Meta_Protocol::FABRIC,
            Meta_Protocol::CORDA,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Meta_Protocol>("Meta.Protocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Meta_Protocol {
}

impl ::std::default::Default for Meta_Protocol {
    fn default() -> Self {
        Meta_Protocol::BITCOIN
    }
}

impl ::protobuf::reflect::ProtobufValue for Meta_Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct View {
    // message fields
    pub meta: ::protobuf::SingularPtrField<Meta>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a View {
    fn default() -> &'a View {
        <View as ::protobuf::Message>::default_instance()
    }
}

impl View {
    pub fn new() -> View {
        ::std::default::Default::default()
    }

    // .common.state.Meta meta = 1;


    pub fn get_meta(&self) -> &Meta {
        self.meta.as_ref().unwrap_or_else(|| <Meta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: Meta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut Meta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> Meta {
        self.meta.take().unwrap_or_else(|| Meta::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for View {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> View {
        View::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Meta>>(
                "meta",
                |m: &View| { &m.meta },
                |m: &mut View| { &mut m.meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &View| { &m.data },
                |m: &mut View| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<View>(
                "View",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static View {
        static instance: ::protobuf::rt::LazyV2<View> = ::protobuf::rt::LazyV2::INIT;
        instance.get(View::new)
    }
}

impl ::protobuf::Clear for View {
    fn clear(&mut self) {
        self.meta.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for View {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for View {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ViewPayload {
    // message fields
    pub request_id: ::std::string::String,
    // message oneof groups
    pub state: ::std::option::Option<ViewPayload_oneof_state>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ViewPayload {
    fn default() -> &'a ViewPayload {
        <ViewPayload as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ViewPayload_oneof_state {
    view(View),
    error(::std::string::String),
}

impl ViewPayload {
    pub fn new() -> ViewPayload {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // .common.state.View view = 2;


    pub fn get_view(&self) -> &View {
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::view(ref v)) => v,
            _ => <View as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_view(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_view(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::view(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: View) {
        self.state = ::std::option::Option::Some(ViewPayload_oneof_state::view(v))
    }

    // Mutable pointer to the field.
    pub fn mut_view(&mut self) -> &mut View {
        if let ::std::option::Option::Some(ViewPayload_oneof_state::view(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(ViewPayload_oneof_state::view(View::new()));
        }
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::view(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_view(&mut self) -> View {
        if self.has_view() {
            match self.state.take() {
                ::std::option::Option::Some(ViewPayload_oneof_state::view(v)) => v,
                _ => panic!(),
            }
        } else {
            View::new()
        }
    }

    // string error = 3;


    pub fn get_error(&self) -> &str {
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::error(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(ViewPayload_oneof_state::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ViewPayload_oneof_state::error(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(ViewPayload_oneof_state::error(::std::string::String::new()));
        }
        match self.state {
            ::std::option::Option::Some(ViewPayload_oneof_state::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.state.take() {
                ::std::option::Option::Some(ViewPayload_oneof_state::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ViewPayload {
    fn is_initialized(&self) -> bool {
        if let Some(ViewPayload_oneof_state::view(ref v)) = self.state {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(ViewPayload_oneof_state::view(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(ViewPayload_oneof_state::error(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &ViewPayload_oneof_state::view(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ViewPayload_oneof_state::error(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &ViewPayload_oneof_state::view(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ViewPayload_oneof_state::error(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ViewPayload {
        ViewPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &ViewPayload| { &m.request_id },
                |m: &mut ViewPayload| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, View>(
                "view",
                ViewPayload::has_view,
                ViewPayload::get_view,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "error",
                ViewPayload::has_error,
                ViewPayload::get_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ViewPayload>(
                "ViewPayload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ViewPayload {
        static instance: ::protobuf::rt::LazyV2<ViewPayload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ViewPayload::new)
    }
}

impl ::protobuf::Clear for ViewPayload {
    fn clear(&mut self) {
        self.request_id.clear();
        self.state = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ViewPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestState {
    // message fields
    pub request_id: ::std::string::String,
    pub status: RequestState_STATUS,
    // message oneof groups
    pub state: ::std::option::Option<RequestState_oneof_state>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestState {
    fn default() -> &'a RequestState {
        <RequestState as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RequestState_oneof_state {
    view(View),
    error(::std::string::String),
}

impl RequestState {
    pub fn new() -> RequestState {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // .common.state.RequestState.STATUS status = 2;


    pub fn get_status(&self) -> RequestState_STATUS {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = RequestState_STATUS::PENDING_ACK;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: RequestState_STATUS) {
        self.status = v;
    }

    // .common.state.View view = 3;


    pub fn get_view(&self) -> &View {
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::view(ref v)) => v,
            _ => <View as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_view(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_view(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::view(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: View) {
        self.state = ::std::option::Option::Some(RequestState_oneof_state::view(v))
    }

    // Mutable pointer to the field.
    pub fn mut_view(&mut self) -> &mut View {
        if let ::std::option::Option::Some(RequestState_oneof_state::view(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(RequestState_oneof_state::view(View::new()));
        }
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::view(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_view(&mut self) -> View {
        if self.has_view() {
            match self.state.take() {
                ::std::option::Option::Some(RequestState_oneof_state::view(v)) => v,
                _ => panic!(),
            }
        } else {
            View::new()
        }
    }

    // string error = 4;


    pub fn get_error(&self) -> &str {
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::error(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(RequestState_oneof_state::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RequestState_oneof_state::error(_)) = self.state {
        } else {
            self.state = ::std::option::Option::Some(RequestState_oneof_state::error(::std::string::String::new()));
        }
        match self.state {
            ::std::option::Option::Some(RequestState_oneof_state::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.state.take() {
                ::std::option::Option::Some(RequestState_oneof_state::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for RequestState {
    fn is_initialized(&self) -> bool {
        if let Some(RequestState_oneof_state::view(ref v)) = self.state {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(RequestState_oneof_state::view(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.state = ::std::option::Option::Some(RequestState_oneof_state::error(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if self.status != RequestState_STATUS::PENDING_ACK {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &RequestState_oneof_state::view(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RequestState_oneof_state::error(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if self.status != RequestState_STATUS::PENDING_ACK {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let ::std::option::Option::Some(ref v) = self.state {
            match v {
                &RequestState_oneof_state::view(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RequestState_oneof_state::error(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestState {
        RequestState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &RequestState| { &m.request_id },
                |m: &mut RequestState| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RequestState_STATUS>>(
                "status",
                |m: &RequestState| { &m.status },
                |m: &mut RequestState| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, View>(
                "view",
                RequestState::has_view,
                RequestState::get_view,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "error",
                RequestState::has_error,
                RequestState::get_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestState>(
                "RequestState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestState {
        static instance: ::protobuf::rt::LazyV2<RequestState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestState::new)
    }
}

impl ::protobuf::Clear for RequestState {
    fn clear(&mut self) {
        self.request_id.clear();
        self.status = RequestState_STATUS::PENDING_ACK;
        self.state = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RequestState_STATUS {
    PENDING_ACK = 0,
    PENDING = 1,
    ERROR = 2,
    COMPLETED = 3,
}

impl ::protobuf::ProtobufEnum for RequestState_STATUS {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestState_STATUS> {
        match value {
            0 => ::std::option::Option::Some(RequestState_STATUS::PENDING_ACK),
            1 => ::std::option::Option::Some(RequestState_STATUS::PENDING),
            2 => ::std::option::Option::Some(RequestState_STATUS::ERROR),
            3 => ::std::option::Option::Some(RequestState_STATUS::COMPLETED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RequestState_STATUS] = &[
            RequestState_STATUS::PENDING_ACK,
            RequestState_STATUS::PENDING,
            RequestState_STATUS::ERROR,
            RequestState_STATUS::COMPLETED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RequestState_STATUS>("RequestState.STATUS", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RequestState_STATUS {
}

impl ::std::default::Default for RequestState_STATUS {
    fn default() -> Self {
        RequestState_STATUS::PENDING_ACK
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestState_STATUS {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/state.proto\x12\x0ccommon.state\"\xed\x01\n\x04Meta\x127\n\
    \x08protocol\x18\x01\x20\x01(\x0e2\x1b.common.state.Meta.ProtocolR\x08pr\
    otocol\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\tR\ttimestamp\x12\x1d\n\npr\
    oof_type\x18\x03\x20\x01(\tR\tproofType\x121\n\x14serialization_format\
    \x18\x04\x20\x01(\tR\x13serializationFormat\"<\n\x08Protocol\x12\x0b\n\
    \x07BITCOIN\x10\0\x12\x0c\n\x08ETHEREUM\x10\x01\x12\n\n\x06FABRIC\x10\
    \x03\x12\t\n\x05CORDA\x10\x04\"B\n\x04View\x12&\n\x04meta\x18\x01\x20\
    \x01(\x0b2\x12.common.state.MetaR\x04meta\x12\x12\n\x04data\x18\x02\x20\
    \x01(\x0cR\x04data\"w\n\x0bViewPayload\x12\x1d\n\nrequest_id\x18\x01\x20\
    \x01(\tR\trequestId\x12(\n\x04view\x18\x02\x20\x01(\x0b2\x12.common.stat\
    e.ViewH\0R\x04view\x12\x16\n\x05error\x18\x03\x20\x01(\tH\0R\x05errorB\
    \x07\n\x05state\"\xf5\x01\n\x0cRequestState\x12\x1d\n\nrequest_id\x18\
    \x01\x20\x01(\tR\trequestId\x129\n\x06status\x18\x02\x20\x01(\x0e2!.comm\
    on.state.RequestState.STATUSR\x06status\x12(\n\x04view\x18\x03\x20\x01(\
    \x0b2\x12.common.state.ViewH\0R\x04view\x12\x16\n\x05error\x18\x04\x20\
    \x01(\tH\0R\x05error\"@\n\x06STATUS\x12\x0f\n\x0bPENDING_ACK\x10\0\x12\
    \x0b\n\x07PENDING\x10\x01\x12\t\n\x05ERROR\x10\x02\x12\r\n\tCOMPLETED\
    \x10\x03B\x07\n\x05stateBq\n\x1ecom.weaver.protos.common.stateZOgithub.c\
    om/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/commonb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
