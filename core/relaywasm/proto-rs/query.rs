// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Query {
    // message fields
    pub policy: ::protobuf::RepeatedField<::std::string::String>,
    pub address: ::std::string::String,
    pub requesting_relay: ::std::string::String,
    pub requesting_network: ::std::string::String,
    pub certificate: ::std::string::String,
    pub requestor_signature: ::std::string::String,
    pub nonce: ::std::string::String,
    pub request_id: ::std::string::String,
    pub requesting_org: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    // repeated string policy = 1;


    pub fn get_policy(&self) -> &[::std::string::String] {
        &self.policy
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.policy = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policy(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.policy
    }

    // Take field
    pub fn take_policy(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.policy, ::protobuf::RepeatedField::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string requesting_relay = 3;


    pub fn get_requesting_relay(&self) -> &str {
        &self.requesting_relay
    }
    pub fn clear_requesting_relay(&mut self) {
        self.requesting_relay.clear();
    }

    // Param is passed by value, moved
    pub fn set_requesting_relay(&mut self, v: ::std::string::String) {
        self.requesting_relay = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requesting_relay(&mut self) -> &mut ::std::string::String {
        &mut self.requesting_relay
    }

    // Take field
    pub fn take_requesting_relay(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requesting_relay, ::std::string::String::new())
    }

    // string requesting_network = 4;


    pub fn get_requesting_network(&self) -> &str {
        &self.requesting_network
    }
    pub fn clear_requesting_network(&mut self) {
        self.requesting_network.clear();
    }

    // Param is passed by value, moved
    pub fn set_requesting_network(&mut self, v: ::std::string::String) {
        self.requesting_network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requesting_network(&mut self) -> &mut ::std::string::String {
        &mut self.requesting_network
    }

    // Take field
    pub fn take_requesting_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requesting_network, ::std::string::String::new())
    }

    // string certificate = 5;


    pub fn get_certificate(&self) -> &str {
        &self.certificate
    }
    pub fn clear_certificate(&mut self) {
        self.certificate.clear();
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: ::std::string::String) {
        self.certificate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut ::std::string::String {
        &mut self.certificate
    }

    // Take field
    pub fn take_certificate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.certificate, ::std::string::String::new())
    }

    // string requestor_signature = 6;


    pub fn get_requestor_signature(&self) -> &str {
        &self.requestor_signature
    }
    pub fn clear_requestor_signature(&mut self) {
        self.requestor_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_requestor_signature(&mut self, v: ::std::string::String) {
        self.requestor_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requestor_signature(&mut self) -> &mut ::std::string::String {
        &mut self.requestor_signature
    }

    // Take field
    pub fn take_requestor_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requestor_signature, ::std::string::String::new())
    }

    // string nonce = 7;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    // string request_id = 8;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // string requesting_org = 9;


    pub fn get_requesting_org(&self) -> &str {
        &self.requesting_org
    }
    pub fn clear_requesting_org(&mut self) {
        self.requesting_org.clear();
    }

    // Param is passed by value, moved
    pub fn set_requesting_org(&mut self, v: ::std::string::String) {
        self.requesting_org = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requesting_org(&mut self) -> &mut ::std::string::String {
        &mut self.requesting_org
    }

    // Take field
    pub fn take_requesting_org(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requesting_org, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Query {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.policy)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requesting_relay)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requesting_network)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.certificate)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requestor_signature)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requesting_org)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.policy {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.requesting_relay.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.requesting_relay);
        }
        if !self.requesting_network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.requesting_network);
        }
        if !self.certificate.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.certificate);
        }
        if !self.requestor_signature.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.requestor_signature);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.nonce);
        }
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.request_id);
        }
        if !self.requesting_org.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.requesting_org);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.policy {
            os.write_string(1, &v)?;
        };
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.requesting_relay.is_empty() {
            os.write_string(3, &self.requesting_relay)?;
        }
        if !self.requesting_network.is_empty() {
            os.write_string(4, &self.requesting_network)?;
        }
        if !self.certificate.is_empty() {
            os.write_string(5, &self.certificate)?;
        }
        if !self.requestor_signature.is_empty() {
            os.write_string(6, &self.requestor_signature)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(7, &self.nonce)?;
        }
        if !self.request_id.is_empty() {
            os.write_string(8, &self.request_id)?;
        }
        if !self.requesting_org.is_empty() {
            os.write_string(9, &self.requesting_org)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query {
        Query::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "policy",
                |m: &Query| { &m.policy },
                |m: &mut Query| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Query| { &m.address },
                |m: &mut Query| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requesting_relay",
                |m: &Query| { &m.requesting_relay },
                |m: &mut Query| { &mut m.requesting_relay },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requesting_network",
                |m: &Query| { &m.requesting_network },
                |m: &mut Query| { &mut m.requesting_network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "certificate",
                |m: &Query| { &m.certificate },
                |m: &mut Query| { &mut m.certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requestor_signature",
                |m: &Query| { &m.requestor_signature },
                |m: &mut Query| { &mut m.requestor_signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &Query| { &m.nonce },
                |m: &mut Query| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &Query| { &m.request_id },
                |m: &mut Query| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requesting_org",
                |m: &Query| { &m.requesting_org },
                |m: &mut Query| { &mut m.requesting_org },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Query>(
                "Query",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Query {
        static instance: ::protobuf::rt::LazyV2<Query> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Query::new)
    }
}

impl ::protobuf::Clear for Query {
    fn clear(&mut self) {
        self.policy.clear();
        self.address.clear();
        self.requesting_relay.clear();
        self.requesting_network.clear();
        self.certificate.clear();
        self.requestor_signature.clear();
        self.nonce.clear();
        self.request_id.clear();
        self.requesting_org.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/query.proto\x12\x0ccommon.query\"\xc2\x02\n\x05Query\x12\
    \x16\n\x06policy\x18\x01\x20\x03(\tR\x06policy\x12\x18\n\x07address\x18\
    \x02\x20\x01(\tR\x07address\x12)\n\x10requesting_relay\x18\x03\x20\x01(\
    \tR\x0frequestingRelay\x12-\n\x12requesting_network\x18\x04\x20\x01(\tR\
    \x11requestingNetwork\x12\x20\n\x0bcertificate\x18\x05\x20\x01(\tR\x0bce\
    rtificate\x12/\n\x13requestor_signature\x18\x06\x20\x01(\tR\x12requestor\
    Signature\x12\x14\n\x05nonce\x18\x07\x20\x01(\tR\x05nonce\x12\x1d\n\nreq\
    uest_id\x18\x08\x20\x01(\tR\trequestId\x12%\n\x0erequesting_org\x18\t\
    \x20\x01(\tR\rrequestingOrgBq\n\x1ecom.weaver.protos.common.queryZOgithu\
    b.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/comm\
    onb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
